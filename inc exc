import json
import re
from docx import Document
from docx.text.paragraph import Paragraph
from docx.table import Table
from docx.oxml.text.paragraph import CT_P
from docx.oxml.table import CT_Tbl
from docx.document import Document as _Document
from docx.table import _Cell
from docx.text.paragraph import _Paragraph
from docx.table import _Table


def iter_block_items(parent):
    if isinstance(parent, _Document):
        parent_elm = parent.element.body
    elif isinstance(parent, _Cell):
        parent_elm = parent._tc
    else:
        raise ValueError("Unsupported parent type")

    for child in parent_elm.iterchildren():
        if isinstance(child, CT_P):
            yield _Paragraph(child, parent)
        elif isinstance(child, CT_Tbl):
            yield _Table(child, parent)


def get_style_info(paragraph):
    """Get list level and infer numbering type via visible bullet"""
    style_info = {
        'text': paragraph.text.strip(),
        'style_name': paragraph.style.name if paragraph.style else None,
        'is_list': False,
        'list_level': None,
        'number_type': None  # "numbered" or "alphabet"
    }

    if paragraph._p.pPr is not None and paragraph._p.pPr.numPr is not None:
        style_info['is_list'] = True
        ilvl = paragraph._p.pPr.numPr.ilvl
        style_info['list_level'] = int(ilvl.val) if ilvl is not None else 0

        # Infer type by visible bullet (regex)
        text = paragraph.text.strip()
        if re.match(r'^\d+(\.\d+)?[\.\)]\s+', text):  # e.g., "1. ", "1.1. "
            style_info['number_type'] = "numbered"
        elif re.match(r'^[a-zA-Z][\.\)]\s+', text):  # e.g., "a) ", "i. "
            style_info['number_type'] = "alpha"
        else:
            style_info['number_type'] = "unknown"

    return style_info


def countExtractor(file_path):
    try:
        doc = Document(file_path)
        inclusion_criteria_found = False
        in_section = False
        ic_counter = 1
        current_ic_key = None
        inclusion_dict = {}

        for block in iter_block_items(doc):
            if isinstance(block, Paragraph):
                text = block.text.strip()

                if not inclusion_criteria_found and "inclusion criteria" in text.lower():
                    inclusion_criteria_found = True
                    in_section = True
                    continue

                if in_section and ("exclusion criteria" in text.lower() or block.style.name.startswith("Heading")):
                    break

                style_info = get_style_info(block)

                if not (style_info['is_list'] and style_info['number_type'] == "numbered"):
                    continue  # skip if not numbered bullet

                if style_info['list_level'] == 0:
                    current_ic_key = f"IC_{ic_counter}"
                    inclusion_dict[current_ic_key] = [style_info['text']]
                    ic_counter += 1
                elif style_info['list_level'] == 1 and current_ic_key:
                    inclusion_dict[current_ic_key].append(style_info['text'])

        return {"Inclusion Criteria": inclusion_dict}

    except Exception as e:
        print(f"Error extracting styles: {str(e)}")
        return {}


def main():
    file_path = "/home/vanshita.m297/Desktop/PS updated/Protocol-Scrapper/data/77242113PSO3001---Protocol.docx"
    result = countExtractor(file_path)
    print(json.dumps(result, indent=2))


if __name__ == "__main__":
    main()
