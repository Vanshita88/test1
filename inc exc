from docx.oxml.ns import qn

def iter_block_items(parent):
    """Yield paragraphs and tables from the parent document or cell."""
    if isinstance(parent, _Document):
        parent_elm = parent.element.body
    else:
        parent_elm = parent._element

    for child in parent_elm.iterchildren():
        if isinstance(child, CT_P):
            yield _Paragraph(child, parent)
        elif isinstance(child, CT_Tbl):
            yield _Table(child, parent)

def get_visible_numbering(paragraph, doc):
    """Extract visible numbering format for list paragraphs (e.g., '1.', '1.1.')"""
    numPr = paragraph._p.pPr.numPr if paragraph._p.pPr is not None else None
    if not numPr:
        return None

    try:
        numId = int(numPr.numId.val)
        ilvl = int(numPr.ilvl.val)

        numbering = doc.part.numbering_part.numbering_definitions._numbering
        nsmap = numbering.nsmap

        abstract_num_id = None
        for num in numbering.findall('.//w:num', nsmap):
            this_num_id = int(num.find(qn('w:numId')).attrib[qn('w:val')])
            if this_num_id == numId:
                abstract_num_id = num.find(qn('w:abstractNumId')).attrib[qn('w:val')]
                break

        if not abstract_num_id:
            return None

        for abstract in numbering.findall('.//w:abstractNum', nsmap):
            if abstract.attrib[qn('w:abstractNumId')] == abstract_num_id:
                for lvl in abstract.findall('.//w:lvl', nsmap):
                    if int(lvl.attrib[qn('w:ilvl')]) == ilvl:
                        num_fmt_el = lvl.find('w:numFmt', nsmap)
                        lvl_text_el = lvl.find('w:lvlText', nsmap)

                        if num_fmt_el is not None and lvl_text_el is not None:
                            num_fmt = num_fmt_el.attrib[qn('w:val')]
                            visible_pattern = lvl_text_el.attrib[qn('w:val')]
                            if num_fmt == "decimal":  # Only include decimal lists (numbered)
                                return {"visible_pattern": visible_pattern, "num_fmt": num_fmt, "ilvl": ilvl}
        return None
    except Exception as e:
        return {"error": str(e)}

def countExtractor(file_path):
    """Extract number of inclusion criteria points (numbered only)"""
    try:
        doc = Document(file_path)
        inclusion_data = {}
        current_main_index = 0
        current_key = None
        in_section = False
        table_found = False

        print("Starting document scan...")

        for block in iter_block_items(doc):
            if isinstance(block, _Paragraph):
                text = block.text.strip()

                # Locate start of Inclusion Criteria section
                if not in_section and "inclusion criteria" in text.lower():
                    in_section = True
                    print("Found 'Inclusion Criteria' section.")
                    continue

                if in_section:
                    # Stop at start of Exclusion Criteria or next heading
                    if "exclusion criteria" in text.lower() or (block.style.name and block.style.name.startswith("Heading")):
                        print("Exiting Inclusion section.")
                        break

                    num_info = get_visible_numbering(block, doc)
                    if num_info and "error" not in num_info:
                        level = num_info["ilvl"]
                        num_fmt = num_info["num_fmt"]

                        # Only allow decimal (numbered) bullets
                        if num_fmt == "decimal":
                            if level == 0:
                                current_main_index += 1
                                current_key = f"IC_{current_main_index}"
                                inclusion_data[current_key] = [current_main_index]
                                print(f"New main point: {current_key} -> {text}")
                            elif level == 1 and current_key:
                                # Add subpoint like 1.1, 1.2 (as int values or str)
                                next_sub_index = len(inclusion_data[current_key])
                                inclusion_data[current_key].append(float(f"{current_main_index}.{next_sub_index}"))
                                print(f"Subpoint added to {current_key}: {text}")
                        else:
                            print(f"Ignoring non-decimal bullet: {text}")
                    else:
                        print(f"Ignored (not a numbered list item): {text}")

            elif isinstance(block, _Table) and in_section:
                table_found = True
                print("Table detected in Inclusion Criteria.")

        # Final structured result
        output = {"Inclusion Criteria": inclusion_data}
        if table_found:
            output["Inclusion Criteria"]["table_found"] = True

        print("Document processing complete.")
        return output

    except Exception as e:
        print("Exception in countExtractor:", str(e))
        return {}
