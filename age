# def ageExtractor(file_path):
#     inclusion_heading = "Inclusion Criteria"
#     exclusion_heading = "Exclusion Criteria"
    
#     age_patterns = [
#         r"(\d+)\s*-\s*(\d+)\s*years?",                # "18 - 65 years"
#         r"(\d+)\s*to\s*(\d+)\s*years?\s*of\s*age",    # "18 to 65 years of age"
#         r"between\s+(\d+)\s+and\s+(\d+)\s*years?",    # "between 18 and 65 years"
#         r"≥\s*(\d+)\s*years?",                        # "≥ 18 years"
#         r"≤\s*(\d+)\s*years?",                        # "≤ 65 years"
#         r">=\s*(\d+)\s*years?",                       # ">= 18 years"
#         r"<=\s*(\d+)\s*years?",                       # "<= 65 years"
#         r">\s*(\d+)\s*years?",                        # "> 18 years"
#         r"<\s*(\d+)\s*years?",                        # "< 65 years"
#         r"greater\s+than\s+(\d+)\s*years?",           # "greater than 18 years"
#         r"less\s+than\s+(\d+)\s*years?",              # "less than 65 years"
#         r"more\s+than\s+(\d+)\s*years?",              # "more than 18 years"
#         r"less\s+or\s+equal\s+to\s+(\d+)\s*years?",   # "less or equal to 65 years"
#         r"more\s+or\s+equal\s+to\s+(\d+)\s*years?",   # "more or equal to 18 years"
#         r"at least (\d+) years? of age",              # "at least 12 years of age"
#         r"no older than (\d+) years?"                 # "no older than 80 years"
#     ]


#     doc = Document(file_path)
#     found_section = False  
#     min_age = None
#     max_age = None

#     for para in doc.paragraphs:
#         text = para.text.strip()
#         #print(f"DEBUG: Checking Paragraph -> {repr(text)}")  

#         if text.lower().startswith(inclusion_heading.lower()):
#             found_section = True
#             print(f"DEBUG: Found Section -> {repr(text)}")  
#             continue

#         if found_section and text.lower().startswith(exclusion_heading.lower()):
#             print(f"DEBUG: Found exclusion criteria {repr(text)}")
#             break

#         if found_section:
            
#             for pattern in age_patterns:
#                 match = re.search(pattern, text, re.IGNORECASE)
#                 # print(f"DEBUG: searching match -> {repr(text)}")

#                 if match:


#                     if len(match.groups()) > 1:
#                         if min_age is None:
#                             min_age = int(match.group(1))
#                             print(f"DEBUG: min_age -> {repr(min_age)}")
#                         if max_age is None:
#                             max_age = int(match.group(2))
#                             print(f"DEBUG: min_age -> {repr(max_age)}")
                            
#                     else:
#                         age_value = int(match.group(1))
#                         if "at least" in pattern or ">" in pattern or "more" in pattern or "≥" in pattern:
#                             if min_age is None:
#                                 min_age = age_value
#                                 print(f"DEBUG: updated min_age -> {repr(min_age)}") 
#                         elif "no older than" in pattern or "<" in pattern or "less" in pattern or "≤" in pattern:
#                                 if max_age is None:
#                                     max_age = age_value
#                                     print(f"DEBUG: updated max_age -> {repr(max_age)}")


#     age_data = {"min": min_age, "max": max_age}
#     print(f"DEBUG: Extracted Age Data -> {repr(age_data)}")  
#     return age_data

