import re
import json
from docx import Document

def count_points(doc_path):
    doc = Document(doc_path)
    sections = {
        "Inclusion Criteria": {"total_points": 0, "points": []},
        "Exclusion Criteria": {"total_points": 0, "points": []}
    }
    current_section = None
    current_point = None

    # Enhanced regex patterns
    point_pattern = re.compile(r'^(\d+)[.)]\s')  # Matches 1., 1), 2., etc.
    subpoint_pattern = re.compile(r'^([A-Za-z])[.)]\s')  # Matches A., a), B., etc.
    subsubpoint_pattern = re.compile(r'^(i{1,3}|iv|vi{0,3}x{0,1}|[a-z])[.)]\s', re.IGNORECASE)  # Matches i., ii), etc.

    for para in doc.paragraphs:
        text = para.text.strip()
        
        # Section detection
        if "Inclusion Criteria" in text:
            current_section = "Inclusion Criteria"
            continue
        elif "Exclusion Criteria" in text:
            current_section = "Exclusion Criteria"
            continue
            
        if current_section:
            # Main point detection
            if point_match := re.match(point_pattern, text):
                point_num = int(point_match.group(1))
                sections[current_section]["total_points"] += 1
                current_point = {
                    "Point_number": point_num,
                    "subpoints_count": 0,
                    "sub-subpoints_count": 0
                }
                sections[current_section]["points"].append(current_point)
            
            # Subpoint detection
            elif subpoint_match := re.match(subpoint_pattern, text):
                if current_point:
                    current_point["subpoints_count"] += 1
            
            # Sub-subpoint detection
            elif subsubpoint_match := re.match(subsubpoint_pattern, text):
                if current_point and current_point["subpoints_count"] > 0:
                    current_point["sub-subpoints_count"] += 1

    return {"count": sections}

# Usage
result = count_points("example.docx")
print(json.dumps(result, indent=2))
