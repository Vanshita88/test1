import re
import json
from docx import Document

def count_points(doc_path):
    doc = Document(doc_path)
    sections = {
        "Inclusion Criteria": {"total_points": 0, "points": []},
        "Exclusion Criteria": {"total_points": 0, "points": []}
    }
    current_section = None
    indent_stack = []

    # Enhanced bullet pattern with indentation tracking
    bullet_pattern = re.compile(
        r'^(\d+[.)]|'                    # Numbered (1., 2))
        r'[A-Za-z][.)]|'                 # Lettered (A., b))
        r'(i{1,3}|iv|vi{0,3})[.)]|'      # Roman numerals (i., ii.)
        r'[\•\*\-\+➢➣])\s+'              # Symbols
        r'.*', 
        re.IGNORECASE
    )

    for para in doc.paragraphs:
        text = para.text.strip()
        
        # Section detection
        if "Inclusion Criteria" in text:
            current_section = "Inclusion Criteria"
            indent_stack = [0]  # Reset indentation tracking
            continue
        elif "Exclusion Criteria" in text:
            current_section = "Exclusion Criteria"
            indent_stack = [0]
            continue

        if current_section and bullet_pattern.match(text):
            # Get indentation in twips
            indent = para.paragraph_format.left_indent
            indent_twips = indent.twips if indent else 0

            # Calculate nesting level
            while indent_stack and indent_twips < indent_stack[-1]:
                indent_stack.pop()
                
            if not indent_stack or indent_twips > indent_stack[-1]:
                indent_stack.append(indent_twips)
                
            current_level = len(indent_stack) - 1

            # Update counts based on nesting level
            if current_level == 0:  # Main point
                sections[current_section]["total_points"] += 1
                sections[current_section]["points"].append({
                    "Point_number": sections[current_section]["total_points"],
                    "subpoints_count": 0,
                    "sub-subpoints_count": 0
                })
            elif current_level == 1:  # Subpoint
                if sections[current_section]["points"]:
                    sections[current_section]["points"][-1]["subpoints_count"] += 1
            elif current_level >= 2:  # Sub-subpoint
                if sections[current_section]["points"]:
                    sections[current_section]["points"][-1]["sub-subpoints_count"] += 1

    return {"count": sections}

# Example usage
result = count_points("example.docx")
print(json.dumps(result, indent=2))
