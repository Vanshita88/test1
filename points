from docx import Document
import re

def count_criteria_points(file_path):
    """
    Returns structure:
    {
        "Inclusion Criteria": {
            "total_points": int,
            "total_subpoints": int,
            "points": [{"Point_number": int, "subpoints_count": int}, ...]
        },
        "Exclusion Criteria": {
            "total_points": int,
            "total_subpoints": int,
            "points": [{"Point_number": int, "subpoints_count": int}, ...]
        }
    }
    """
    doc = Document(file_path)
    
    result = {
        "Inclusion Criteria": {"total_points": 0, "total_subpoints": 0, "points": []},
        "Exclusion Criteria": {"total_points": 0, "total_subpoints": 0, "points": []}
    }
    
    current_section = None
    current_main_point = None
    
    # Regex patterns for different numbering styles
    main_point_pattern = re.compile(r'^\s*(\d+)[\.\)]\s+(.*)')
    sub_point_pattern = re.compile(
        r'^\s*([a-zA-Z]\)|[\*\-\+â€¢]|(\d+[\.\)])+|\d+\.\d+[\.\)]?)\s+(.*)',
        re.IGNORECASE
    )
    
    for para in doc.paragraphs:
        text = para.text.strip()
        print(f"\nProcessing paragraph: '{text}'")  # Debug
        
        # Detect section headers (more flexible matching)
        if re.match(r'^Inclusion\s+Criteria\b.*', text, re.IGNORECASE):
            current_section = "Inclusion Criteria"
            current_main_point = None
            print(f"âœ… Detected section: {current_section}")
            continue
            
        if re.match(r'^Exclusion\s+Criteria\b.*', text, re.IGNORECASE):
            current_section = "Exclusion Criteria"
            current_main_point = None
            print(f"âœ… Detected section: {current_section}")
            continue
            
        if current_section:
            # Main point detection
            main_match = main_point_pattern.match(text)
            if main_match:
                point_number = int(main_match.group(1))
                current_main_point = {
                    "Point_number": point_number,
                    "subpoints_count": 0
                }
                result[current_section]["points"].append(current_main_point)
                result[current_section]["total_points"] += 1
                print(f"ðŸ”· Main point {point_number} detected")
                continue
                
            # Subpoint detection
            sub_match = sub_point_pattern.match(text)
            if sub_match and current_main_point:
                current_main_point["subpoints_count"] += 1
                result[current_section]["total_subpoints"] += 1
                print(f"  â—¦ Subpoint detected under point {current_main_point['Point_number']}")
                
    print("\nDebug - Final results:")
    print(result)  # Debug output
    return result
