from docx import Document
from docx.document import Document as _Document
from docx.oxml.table import CT_Tbl
from docx.oxml.text.paragraph import CT_P
from docx.table import Table as _Table
from docx.text.paragraph import Paragraph as _Paragraph
import re

def countExtractor(file_path):
    """Extract style information for inclusion criteria section"""
    def iter_block_items(parent):
        if isinstance(parent, _Document):
            parent_elm = parent.element.body
        for child in parent_elm.iterchildren():
            if isinstance(child, CT_P):
                yield _Paragraph(child, parent)
            elif isinstance(child, CT_Tbl):
                yield _Table(child, parent)

    
def get_style_details(paragraph):
    """Get detailed style information for a paragraph"""
    style_info = {
        'text': paragraph.text.strip(),
        'style_name': paragraph.style.name if paragraph.style else None,
        'is_list': False,
        'list_level': None,
        'numbering_format': None,
        'is_table': False
    }

    # Check if paragraph has numbering properties
    if paragraph._p.pPr is not None and paragraph._p.pPr.numPr is not None:
        num_pr = paragraph._p.pPr.numPr
        style_info['is_list'] = True
        
        # Get list level using explicit None check
        ilvl = num_pr.ilvl
        style_info['list_level'] = ilvl.val if ilvl is not None else 0
        
        try:
            num_id = num_pr.numId.val
            num = Document(file_path).part.numbering_part.numbering_definitions[num_id]
            style_info['numbering_format'] = num.numStyleLink if num.numStyleLink else str(num.numFmt.val)
        except Exception as e:
            style_info['numbering_format'] = f'error: {str(e)}'

    return style_info

    try:
        doc = Document(file_path)
        styles_data = []
        in_section = False

        for block in iter_block_items(doc):
            if isinstance(block, _Paragraph):
                text = block.text.strip()
                
                if not in_section and "inclusion criteria" in text.lower():
                    in_section = True
                    continue
                
                if in_section:
                    if block.style.name.startswith('Heading'):
                        break
                    style_info = get_style_details(block)
                    styles_data.append(style_info)

            elif isinstance(block, _Table) and in_section:
                for row in block.rows:
                    for cell in row.cells:
                        styles_data.append({
                            'text': cell.text.strip(),
                            'style_name': 'Table Cell',
                            'is_list': False,
                            'list_level': None,
                            'numbering_format': None,
                            'is_table': True
                        })

        return styles_data

    except Exception as e:
        print(f"Error extracting styles: {str(e)}")
        return []



shita.m297@U-ZPD9CMFILJXN:~/Desktop/PS updated/Protocol-Scrapper$ python main.py
/home/vanshita.m297/Desktop/PS updated/Protocol-Scrapper/utils/extract_data.py:1191: FutureWarning: Truth-testing of elements was a source of confusion and will always return True in future versions. Use specific 'len(elem)' or 'elem is not None' test instead.
  if paragraph._p.pPr.numPr:
/home/vanshita.m297/Desktop/PS updated/Protocol-Scrapper/utils/extract_data.py:1193: FutureWarning: Truth-testing of elements was a source of confusion and will always return True in future versions. Use specific 'len(elem)' or 'elem is not None' test instead.
  style_info['list_level'] = paragraph._p.pPr.numPr.ilvl.val if paragraph._p.pPr.numPr.ilvl else 0
complete
