def TableExtractor(file_path):
    try:
        doc = docx.Document(file_path)
    except Exception as e:
        print(f"Error reading the file: {e}")
        return {}

    table_label_pattern = re.compile(
        r"(?:Table\s+[\dA-Za-z]+:\s*)?Description\s+of\s+(?:Study\s+Arms|Interventions|Treatment)(?:\s+.+)?",
        re.IGNORECASE
    )

    extracted_tables = {}
    paragraphs = doc.paragraphs
    tables = doc.tables

    # Store indices of paragraphs that match the heading regex
    matched_headings = []
    
    for i, para in enumerate(paragraphs):
        if table_label_pattern.search(para.text):  # If heading matches regex
            matched_headings.append(i)
            print(f"Found matching heading: {para.text.strip()} at paragraph {i}")

    # Extract table data corresponding to matched headings
    table_idx = 0  # Track which table to associate with the matched heading
    for idx in matched_headings:
        if table_idx < len(tables):
            table_name = paragraphs[idx].text.strip()  # Use the heading as the table name
            print(f"Extracting table for: {table_name}")
            extracted_tables[table_name] = extract_table_data(tables[table_idx])
            table_idx += 1  # Move to the next table
        else:
            print(f"No more tables to extract after {table_name}")
    
    return extracted_tables


def extract_table_data(table):
    """Extracts data from a table and returns it as a list of dictionaries."""
    data = []
    headers = [cell.text.strip() for cell in table.rows[0].cells]  # Extract headers

    # Debug: Print the headers
    print(f"Table Headers: {headers}")

    for row in table.rows[1:]:  # Skip header row
        row_data = {headers[i]: row.cells[i].text.strip() for i in range(len(headers))}
        data.append(row_data)

        # Debug: Print the row data
        print(f"Row data: {row_data}")

    return data
