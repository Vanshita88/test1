from docx import Document
import re

def AgeExtractor(file_path):
    target_heading = "Inclusion Criteria"
    age_keywords = ["Age", "age"]
    age_patterns = [
        r"(\d+)\s*-\s*(\d+)\s*years",               # e.g., "18 - 65 years"
        r"between\s+(\d+)\s+and\s+(\d+)\s+years",   # e.g., "between 18 and 65 years"
        r"≥\s*(\d+)\s*years?",                      # e.g., "≥ 18 years"
        r"≤\s*(\d+)\s*years?",                      # e.g., "≤ 65 years"
        r"greater\s+than\s+(\d+)\s*years?",         # e.g., "greater than 18 years"
        r"less\s+than\s+(\d+)\s*years?",            # e.g., "less than 65 years"
        r"more\s+than\s+(\d+)\s*years?",            # e.g., "more than 18 years"
        r"less\s+or\s+equal\s+to\s+(\d+)\s*years?", # e.g., "less or equal to 65 years"
        r"more\s+or\s+equal\s+to\s+(\d+)\s*years?", # e.g., "more or equal to 18 years"
        r">=\s*(\d+)",                              # e.g., ">= 18"
        r"<=\s*(\d+)",                              # e.g., "<= 65"
        r">\s*(\d+)",                               # e.g., "> 18"
        r"<\s*(\d+)"                                # e.g., "< 65"
    ]

    doc = Document(file_path)
    found_section = False  
    min_age = None
    max_age = None

    for para in doc.paragraphs:
        text = para.text.strip()
        print(f"DEBUG: Checking Paragraph -> {repr(text)}")  

        if text.lower() == target_heading.lower():
            found_section = True
            print(f"DEBUG: Found Section -> {repr(text)}")  
            continue

        if found_section:
            if any(keyword in text for keyword in age_keywords):
                print(f"DEBUG: Found Age Keyword -> {repr(text)}")  

                for pattern in age_patterns:
                    match = re.search(pattern, text, re.IGNORECASE)
                    if match:
                        if len(match.groups()) > 1:
                            min_age, max_age = int(match.group(1)), int(match.group(2))
                        else:
                            age_value = int(match.group(1))
                            if ">" in pattern or "more" in pattern or "≥" in pattern:
                                min_age = age_value
                            elif "<" in pattern or "less" in pattern or "≤" in pattern:
                                max_age = age_value

    # Step 4: Check tables under "Inclusion Criteria"
    if found_section:
        for table in doc.tables:
            for row in table.rows:
                for cell in row.cells:
                    cell_text = cell.text.strip()
                    print(f"DEBUG: Checking Table Cell -> {repr(cell_text)}")  

                    if any(keyword in cell_text for keyword in age_keywords):
                        for pattern in age_patterns:
                            match = re.search(pattern, cell_text, re.IGNORECASE)
                            if match:
                                if len(match.groups()) > 1:
                                    min_age, max_age = int(match.group(1)), int(match.group(2))
                                else:
                                    age_value = int(match.group(1))
                                    if ">" in pattern or "more" in pattern or "≥" in pattern:
                                        min_age = age_value
                                    elif "<" in pattern or "less" in pattern or "≤" in pattern:
                                        max_age = age_value

    # Step 5: Prepare structured output
    age_data = {"min": min_age, "max": max_age}
    print(f"DEBUG: Extracted Age Data -> {repr(age_data)}")  
    return age_data
