import re
from docx import Document

def ageExtractor(file_path):
    inclusion_heading = "Inclusion Criteria"
    exclusion_heading = "Exclusion Criteria"
    
    age_patterns = [
        r"(\d+)\s*-\s*(\d+)\s*years?",          # Matches "18 - 65 years"
        r"(\d+)\s*to\s*(\d+)\s*years?\s*of\s*age",  # Matches "18 to 65 years of age"
        r"≥\s*(\d+)\s*years?",                  # Matches "≥ 18 years"
        r"≤\s*(\d+)\s*years?",                  # Matches "≤ 65 years"
        r"at least (\d+) years? of age",        # Matches "at least 12 years of age"
        r"no older than (\d+) years?"           # Matches "no older than 80 years"
    ]

    doc = Document(file_path)
    found_section = False
    inclusion_text = ""
    age_lines = set()  # Store unique lines with age mentions

    # Extract text from the Inclusion Criteria section
    for para in doc.paragraphs:
        text = para.text.strip()
        
        if text.lower().startswith(inclusion_heading.lower()):
            found_section = True
            continue  # Skip the heading itself
        
        if found_section and text.lower().startswith(exclusion_heading.lower()):
            break  # Stop at Exclusion Criteria
        
        if found_section:
            inclusion_text += text + "\n"  # Preserve paragraph boundaries

    # Process the inclusion text to find age mentions and their lines
    for match in re.finditer(r"|".join(age_patterns), inclusion_text, re.IGNORECASE):
        start_idx, end_idx = match.start(), match.end()
        age_mention = match.group()
        
        # Check for nearby "screening" or "consent" (±10 characters)
        surrounding = inclusion_text[max(0, start_idx-10) : min(len(inclusion_text), end_idx+10)]
        if re.search(r"\b(screening|consent)\b", surrounding, re.IGNORECASE):
            continue  # Skip this match
        
        # Extract the entire line (paragraph) where the age mention occurs
        line_start = inclusion_text.rfind('\n', 0, start_idx) + 1
        line_end = inclusion_text.find('\n', start_idx)
        if line_end == -1:
            line_end = len(inclusion_text)
        full_line = inclusion_text[line_start:line_end].strip()
        
        age_lines.add(full_line)  # Deduplicate using a set

    return list(age_lines)  # Return list of unique lines

# Example usage
age_lines = ageExtractor("clinical_trial.docx")
print("Age criteria lines:", age_lines)
